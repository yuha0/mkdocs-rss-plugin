{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"MkDocs RSS plugin # A plugin for MkDocs , the static site generator, which creates RSS 2.0 feeds using the creation and modification dates from git log and page metadata ( YAML frontmatter ). Usage # Minimal mkdocs.yml configuration : site_description : required. Used as feed mandatory channel description. site_name : required. Used as feed mandatory channel title and items source URL label. site_url : required. Used to build feed items URLs. Minimal plugin option: plugins : - rss Full options: plugins : - rss : abstract_chars_count : 160 # -1 for full content categories : - tags comments_path : \"#__comments\" date_from_meta : as_creation : \"date\" as_update : false datetime_format : \"%Y-%m-%d %H:%M\" enabled : true feed_ttl : 1440 image : https://upload.wikimedia.org/wikipedia/commons/thumb/4/43/Feed-icon.svg/128px-Feed-icon.svg.png length : 20 pretty_print : false match_path : \".*\" url_parameters : utm_source : \"documentation\" utm_medium : \"RSS\" utm_campaign : \"feed-syndication\" For further information, see the user documentation . Following initiative from the author of Material for MkDocs, this plugin provides its own JSON schema to validate configuration: source - documentation . Development # Clone the repository: # install project as editable python -m pip install -U -r requirements.txt # install development dependencies python -m pip install -U -r requirements/development.txt # install git hooks pre-commit install # run tests pytest # install dependencies for documentation python -m pip install -U -r requirements/documentation.txt Then follow the contribution guidelines . Release workflow # Fill the CHANGELOG.md Change the version number in __about__.py Apply a git tag with the relevant version: git tag -a 0.3.0 {git commit hash} -m \"New awesome feature\" Push tag to main branch: git push origin 0.3.0 Quickstart # Installation: pip install mkdocs-rss-plugin Then in your mkdocs.yml : plugins: - rss Example # As examples, here come the feeds generated for this documentation: feed_rss_created.xml for latest created pages: W3C validator feed_rss_updated.xml for latest updated pages: W3C validator Or it could be displayed as a Feedly follow button: Credits # Plugin logic is inspired from Tim Vink git-based plugins and main parts of Git stuff are nearly copied/pasted. Using magic from: GitPython Jinja2 Documentation theme United from mkdocs-bootswatch as a tribute to the classic RSS color scheme: orange and white.","title":"Home"},{"location":"#mkdocs-rss-plugin","text":"A plugin for MkDocs , the static site generator, which creates RSS 2.0 feeds using the creation and modification dates from git log and page metadata ( YAML frontmatter ).","title":"MkDocs RSS plugin"},{"location":"#usage","text":"Minimal mkdocs.yml configuration : site_description : required. Used as feed mandatory channel description. site_name : required. Used as feed mandatory channel title and items source URL label. site_url : required. Used to build feed items URLs. Minimal plugin option: plugins : - rss Full options: plugins : - rss : abstract_chars_count : 160 # -1 for full content categories : - tags comments_path : \"#__comments\" date_from_meta : as_creation : \"date\" as_update : false datetime_format : \"%Y-%m-%d %H:%M\" enabled : true feed_ttl : 1440 image : https://upload.wikimedia.org/wikipedia/commons/thumb/4/43/Feed-icon.svg/128px-Feed-icon.svg.png length : 20 pretty_print : false match_path : \".*\" url_parameters : utm_source : \"documentation\" utm_medium : \"RSS\" utm_campaign : \"feed-syndication\" For further information, see the user documentation . Following initiative from the author of Material for MkDocs, this plugin provides its own JSON schema to validate configuration: source - documentation .","title":"Usage"},{"location":"#development","text":"Clone the repository: # install project as editable python -m pip install -U -r requirements.txt # install development dependencies python -m pip install -U -r requirements/development.txt # install git hooks pre-commit install # run tests pytest # install dependencies for documentation python -m pip install -U -r requirements/documentation.txt Then follow the contribution guidelines .","title":"Development"},{"location":"#release-workflow","text":"Fill the CHANGELOG.md Change the version number in __about__.py Apply a git tag with the relevant version: git tag -a 0.3.0 {git commit hash} -m \"New awesome feature\" Push tag to main branch: git push origin 0.3.0","title":"Release workflow"},{"location":"#quickstart","text":"Installation: pip install mkdocs-rss-plugin Then in your mkdocs.yml : plugins: - rss","title":"Quickstart"},{"location":"#example","text":"As examples, here come the feeds generated for this documentation: feed_rss_created.xml for latest created pages: W3C validator feed_rss_updated.xml for latest updated pages: W3C validator Or it could be displayed as a Feedly follow button:","title":"Example"},{"location":"#credits","text":"Plugin logic is inspired from Tim Vink git-based plugins and main parts of Git stuff are nearly copied/pasted. Using magic from: GitPython Jinja2 Documentation theme United from mkdocs-bootswatch as a tribute to the classic RSS color scheme: orange and white.","title":"Credits"},{"location":"changelog/","text":"Changelog # All notable changes to this project will be documented in this file. The format is based on Keep a Changelog , and this project adheres to Semantic Versioning . 1.1.0 - 2022-04-27 # Changed # switched license to MIT. (See #117) 1.0.0 - 2022-03-31 # First stable release according to semver. So, no feature in this release, just focusing on quality and code cleanliness. Added # Unit tests to reach a 80% coverage score Changed # Supported Mkdocs versions range increased to mkdocs>=1.1,<1.4 Fixed # Minor bugs fixes Minor documentation improvments 0.21.0 - 2022-02-10 # Added # JSON Schema for configuration validation compatible with Python 3.10 0.20.1 - 2022-02-08 # Fixed # Error when using \"enabled: false\" together with \"match_path\" (see #104 - PR #107). Reported by @prcr, fixed by @dcode. Thanks to them! 0.20.0 - 2022-01-06 # Added # option to enable/disable the plugin, for example through an environment variable (default: enabled). See: PR #103, related doc section Changed # CI: Python version used to build and publish package is now 3.9 Removed # support for Python 3.6 (EOL) 0.19.1 - 2021-10-04 # Fixed # Fix #95: introduced logic did not handle case where categories meta keys are not defined 0.19.0 - 2021-10-02 # Added # new option to include RSS <category> item element using page metadata (YAML frontmatter). It's customizable to get custom meta keys for keywords/tags. PR #4 0.18.0 - 2021-09-20 # Added # option to get the full page content into thed. Contributed by liang2kl with PR 88 . See the related documentation section . Changed # documentation on ReadTheDocs has been removed to reduce confusion and dependencies. PR #89 . 0.17.0 - 2021-06-14 # Changed # bump MkDocs maximal version Fixed # improve DockerFile used to test, fixing it after Material removed some dependencies 0.16.1 # Fixed # remove a print statement 0.16.0 # Added # add option to handle the RSS item comments element through item URL path (see documentation ) Changed # ignore urllib.error.URLError exception to avoid build crashes typically when network is offline 0.15.0 # Added # ability to define URL parameters on items URLs (see documentation ) complete unit tests and display code coverage badge (using codecov.io) Changed # homogenization of docstrings on the sphinx format (as stipulated in the contribution guidelines) 0.14.0 # Fixed # fix match_path option by skipping the pages that aren't included. See PR #49 . Contributed by Paulo Ribeiro . Added # add isort to development toolbelt 0.13.0 # Added # if page.meta.description is not set, the abstract_chars_count first characters from markdown content are now converted into HTML. add match_path option which should be a regex pattern matching the path to your files within the docs_dir. See issue #34 and the related PR #43 . Contributed by Ryan Morshead . 0.12.0 # Added # add support to page.meta.authors or page.meta.author to populate feed items author tag. See issue #34 . 0.11.0 # Added # option to prettify the output, disabling minify. See issue #18 , PR #33 and related documentation section Changed # By default, the output file is now minified. 0.10.0 # Added # option to use dates from page metadata (YAML front-matter) instead of git log. See #14 and related documentation section Python 3.9 is enabled in CI and referenced in PyPi tags Changed # the default length for description has been changed from 150 to 160 to fit maximum recommendation 0.9.0 # Improved # enable auto-escape on feed and item titles, using the Jinja e filter - see #19 improve consistency for missing attributes in mkdocs.yml, returning almost always a None value 0.8.0 # Added # RSS compliance: image length is now present into enclosure tags - See #9 User documentation: clarify how item elements are computed add how to edit HTML templates meta-tags to reference feeds API reference documentation generated from source code and published through Read The Docs 0.7.2 # Fixed # wrong items order in updated feed 0.7.1 # Fixed # feed for updated content is broken - #15 0.7.0 # Added # plugin: add the language tag to the channel tooling: add first unit tests and code coverage add Github Action to perform tests check docker build using mkdocs-material Changed # docs: switch Feedly images from HTTP to HTTPS 0.6.1 # Fixed # remove print from plugin code 0.6.0 # Added # plugin: add tag guid to the feed's items (using the page URL) Changed # docs: minor improvments 0.5.0 # Added # plugin: handle channel image and items (entries) enclosure Changed # plugin: refactoring to build feed entry through a method","title":"Changelog"},{"location":"changelog/#changelog","text":"All notable changes to this project will be documented in this file. The format is based on Keep a Changelog , and this project adheres to Semantic Versioning .","title":"Changelog"},{"location":"changelog/#110-2022-04-27","text":"","title":"1.1.0 - 2022-04-27"},{"location":"changelog/#changed","text":"switched license to MIT. (See #117)","title":"Changed"},{"location":"changelog/#100-2022-03-31","text":"First stable release according to semver. So, no feature in this release, just focusing on quality and code cleanliness.","title":"1.0.0 - 2022-03-31"},{"location":"changelog/#added","text":"Unit tests to reach a 80% coverage score","title":"Added"},{"location":"changelog/#changed_1","text":"Supported Mkdocs versions range increased to mkdocs>=1.1,<1.4","title":"Changed"},{"location":"changelog/#fixed","text":"Minor bugs fixes Minor documentation improvments","title":"Fixed"},{"location":"changelog/#0210-2022-02-10","text":"","title":"0.21.0 - 2022-02-10"},{"location":"changelog/#added_1","text":"JSON Schema for configuration validation compatible with Python 3.10","title":"Added"},{"location":"changelog/#0201-2022-02-08","text":"","title":"0.20.1 - 2022-02-08"},{"location":"changelog/#fixed_1","text":"Error when using \"enabled: false\" together with \"match_path\" (see #104 - PR #107). Reported by @prcr, fixed by @dcode. Thanks to them!","title":"Fixed"},{"location":"changelog/#0200-2022-01-06","text":"","title":"0.20.0 - 2022-01-06"},{"location":"changelog/#added_2","text":"option to enable/disable the plugin, for example through an environment variable (default: enabled). See: PR #103, related doc section","title":"Added"},{"location":"changelog/#changed_2","text":"CI: Python version used to build and publish package is now 3.9","title":"Changed"},{"location":"changelog/#removed","text":"support for Python 3.6 (EOL)","title":"Removed"},{"location":"changelog/#0191-2021-10-04","text":"","title":"0.19.1 - 2021-10-04"},{"location":"changelog/#fixed_2","text":"Fix #95: introduced logic did not handle case where categories meta keys are not defined","title":"Fixed"},{"location":"changelog/#0190-2021-10-02","text":"","title":"0.19.0 - 2021-10-02"},{"location":"changelog/#added_3","text":"new option to include RSS <category> item element using page metadata (YAML frontmatter). It's customizable to get custom meta keys for keywords/tags. PR #4","title":"Added"},{"location":"changelog/#0180-2021-09-20","text":"","title":"0.18.0 - 2021-09-20"},{"location":"changelog/#added_4","text":"option to get the full page content into thed. Contributed by liang2kl with PR 88 . See the related documentation section .","title":"Added"},{"location":"changelog/#changed_3","text":"documentation on ReadTheDocs has been removed to reduce confusion and dependencies. PR #89 .","title":"Changed"},{"location":"changelog/#0170-2021-06-14","text":"","title":"0.17.0 - 2021-06-14"},{"location":"changelog/#changed_4","text":"bump MkDocs maximal version","title":"Changed"},{"location":"changelog/#fixed_3","text":"improve DockerFile used to test, fixing it after Material removed some dependencies","title":"Fixed"},{"location":"changelog/#0161","text":"","title":"0.16.1"},{"location":"changelog/#fixed_4","text":"remove a print statement","title":"Fixed"},{"location":"changelog/#0160","text":"","title":"0.16.0"},{"location":"changelog/#added_5","text":"add option to handle the RSS item comments element through item URL path (see documentation )","title":"Added"},{"location":"changelog/#changed_5","text":"ignore urllib.error.URLError exception to avoid build crashes typically when network is offline","title":"Changed"},{"location":"changelog/#0150","text":"","title":"0.15.0"},{"location":"changelog/#added_6","text":"ability to define URL parameters on items URLs (see documentation ) complete unit tests and display code coverage badge (using codecov.io)","title":"Added"},{"location":"changelog/#changed_6","text":"homogenization of docstrings on the sphinx format (as stipulated in the contribution guidelines)","title":"Changed"},{"location":"changelog/#0140","text":"","title":"0.14.0"},{"location":"changelog/#fixed_5","text":"fix match_path option by skipping the pages that aren't included. See PR #49 . Contributed by Paulo Ribeiro .","title":"Fixed"},{"location":"changelog/#added_7","text":"add isort to development toolbelt","title":"Added"},{"location":"changelog/#0130","text":"","title":"0.13.0"},{"location":"changelog/#added_8","text":"if page.meta.description is not set, the abstract_chars_count first characters from markdown content are now converted into HTML. add match_path option which should be a regex pattern matching the path to your files within the docs_dir. See issue #34 and the related PR #43 . Contributed by Ryan Morshead .","title":"Added"},{"location":"changelog/#0120","text":"","title":"0.12.0"},{"location":"changelog/#added_9","text":"add support to page.meta.authors or page.meta.author to populate feed items author tag. See issue #34 .","title":"Added"},{"location":"changelog/#0110","text":"","title":"0.11.0"},{"location":"changelog/#added_10","text":"option to prettify the output, disabling minify. See issue #18 , PR #33 and related documentation section","title":"Added"},{"location":"changelog/#changed_7","text":"By default, the output file is now minified.","title":"Changed"},{"location":"changelog/#0100","text":"","title":"0.10.0"},{"location":"changelog/#added_11","text":"option to use dates from page metadata (YAML front-matter) instead of git log. See #14 and related documentation section Python 3.9 is enabled in CI and referenced in PyPi tags","title":"Added"},{"location":"changelog/#changed_8","text":"the default length for description has been changed from 150 to 160 to fit maximum recommendation","title":"Changed"},{"location":"changelog/#090","text":"","title":"0.9.0"},{"location":"changelog/#improved","text":"enable auto-escape on feed and item titles, using the Jinja e filter - see #19 improve consistency for missing attributes in mkdocs.yml, returning almost always a None value","title":"Improved"},{"location":"changelog/#080","text":"","title":"0.8.0"},{"location":"changelog/#added_12","text":"RSS compliance: image length is now present into enclosure tags - See #9 User documentation: clarify how item elements are computed add how to edit HTML templates meta-tags to reference feeds API reference documentation generated from source code and published through Read The Docs","title":"Added"},{"location":"changelog/#072","text":"","title":"0.7.2"},{"location":"changelog/#fixed_6","text":"wrong items order in updated feed","title":"Fixed"},{"location":"changelog/#071","text":"","title":"0.7.1"},{"location":"changelog/#fixed_7","text":"feed for updated content is broken - #15","title":"Fixed"},{"location":"changelog/#070","text":"","title":"0.7.0"},{"location":"changelog/#added_13","text":"plugin: add the language tag to the channel tooling: add first unit tests and code coverage add Github Action to perform tests check docker build using mkdocs-material","title":"Added"},{"location":"changelog/#changed_9","text":"docs: switch Feedly images from HTTP to HTTPS","title":"Changed"},{"location":"changelog/#061","text":"","title":"0.6.1"},{"location":"changelog/#fixed_8","text":"remove print from plugin code","title":"Fixed"},{"location":"changelog/#060","text":"","title":"0.6.0"},{"location":"changelog/#added_14","text":"plugin: add tag guid to the feed's items (using the page URL)","title":"Added"},{"location":"changelog/#changed_10","text":"docs: minor improvments","title":"Changed"},{"location":"changelog/#050","text":"","title":"0.5.0"},{"location":"changelog/#added_15","text":"plugin: handle channel image and items (entries) enclosure","title":"Added"},{"location":"changelog/#changed_11","text":"plugin: refactoring to build feed entry through a method","title":"Changed"},{"location":"configuration/","text":"Configuration # To produce a valid RSS feed, the plugin uses: some global settings from MkDocs configuration some page attributes some specific settings to custom behavior or add some optional elements MkDocs configuration # Setting Expected level Corresponding RSS element site_description required description site_name required title and also as source URL label for each feed item site_url required link ---- ---- ---- repo_url recomended docs site_author recomended managingEditor ---- ---- ---- copyright optional copyright locale or theme/locale or theme/language optional language Automatic elements # Variable / value Corresponding RSS element MkDocs build timestamp optional channel elements lastBuildDate and pubDate MkDocs RSS plugin - v 1.0.0 optional channel elements generator Page attributes # Basically, each page is an item element in the RSS feed. Attribute Expected level Corresponding RSS element page.canonical_url required and optional mandatory item element link and also used as guid page.meta.title required title page.meta.description if present, else extract headlines from the content. See below the item_description_length option . required description creation or last update datetime according git log. Can be overridden by dates in page.meta. If not, then it uses MkDcos build date recomended pubDate page.meta.image optional item element enclosure . Some HTTP requests can be performed to retrieve remote images length. page.meta.authors or page.meta.author . Accepted value types: str list , tuple . To comply with the standard, the page writer is responsible to fill this field following this syntax: john@doe.com (John Doe) ( read this SO ). optional author page.meta.tags or any tags value (for example page.meta.categories ...). Accepted value types: str list . optional category Item image (enclosure) # To add an image to a feed item as enclosure , the page writer is responsible to fill the page.meta.image . The plugin tries to retrieve the image length and mime-type to complete the enclosure tag. Accepted keys: image : preferred illustration : alternative to make it easier to comply with some themes Accepted values: remote image URL: must be reachable from the build environment. relative path to the image: the plugin adds the site_url to the path to ensure that image will be reachable by external feed readers once the site is published. Examples # Local image # mkdocs.yml : site_url : https://blog.mydomain.com Page: --- [...] image: \"featured_images.png\" --- # Page h1 title Some page text. Output: <item> [...] <title> Page h1 title </title> <enclosure url= \"https://blog.mydomain.com/featured_images.png\" type= \"image/png\" length= \"219753\" /> [...] </item> Remote image # --- [...] image: \"http://example.com/image.jpg\" --- # Page h1 title Some page text. Output: <item> [...] <title> Page h1 title </title> <enclosure url= \"http://example.com/image.jpg\" type= \"image/jpg\" length= \"19753\" /> [...] </item> Plugin options # For a sample see homepage . Disabling the plugin # You can use the enabled option to optionally disable this plugin. A possible use case is local development where you might want faster build times. It's recommended to use this option with an environment variable together with a default fallback (introduced in mkdocs v1.2.1, see docs ). Example: plugins : - rss : enabled : !ENV [ MKDOCS_ENABLE_RSS_PLUGIN , True ] Which enables you to disable the plugin locally using: export MKDOCS_ENABLE_RSS_PLUGIN = false mkdocs serve Channel image # image : URL to image to use as feed illustration. Default: None . Example # plugins : - rss : image : https://upload.wikimedia.org/wikipedia/commons/thumb/4/43/Feed-icon.svg/128px-Feed-icon.svg.png Output: <image> <url> https://upload.wikimedia.org/wikipedia/commons/thumb/4/43/Feed-icon.svg/128px-Feed-icon.svg.png </url> <title> MkDocs RSS Plugin </title> <link> https://guts.github.io/mkdocs-rss-plugin/ </link> </image> Item comments path # comments_path : path to add to each item URL pointing. Default: None . For example, if you're using Material for Mkdocs with comment integration (Disqus or Isso), the comment block is under the div id __comments , so you can set: comments_path: \"#__comments\" and the output will be: <item> <title> This page title is a perfect clickbait! </title> <link> https://website.com/articles/best_article/ </link> <comments> https://website.com/articles/best_article/#__comments </comments> [...] </item> Feed length # length : number of pages to include as feed items (entries). Default: 20 Feed TTL # feed_ttl : number of minutes to be cached. Inserted as channel ttl element. See: W3C RSS 2.0 documentation . Default: 1440 (= 1 day) Output: <ttl> 1440 </ttl> Item description length # To fill each item description element : If this value is set to -1 , then the articles' full HTML content will be filled into the description element. Otherwise, the plugin first tries to retrieve the value of the keyword description from the page metadata . If the value is non-negative and no description meta is found, then the plugin retrieves the first number of characters of the page content defined by this setting. Retrieved content is the raw markdown converted rougthly into HTML. abstract_chars_count : number of characters to use as item description. Default: 150 Item categories # categories : list of page metadata values to use as RSS item categories . Default: None . Example # In configuration: - rss : categories : - tags # will look into page.meta.tags - categories # will also look into page.meta.categories In page 1: --- title: \"Lorem Ipsum 1\" tags: - tag x - tag Y --- [...] In page 2 --- title: \"Page 2\" categories: [\"Release notes\", \"test\"] --- [...] Output: [...] <item> <title> Lorem Ipsum 1 </title> <category> tag x </category> <category> tag Y </category> [...] </item> <item> <title> Page 2 </title> <category> Release notes </category> <category> test </category> [...] </item> [...] Dates overriding # Basically, the plugin aims to retrieve creation and update dates from git log. But sometimes, it does not match the content workflow: markdown generated from sources, . So, it's possible to use the dates manually specified into the page metadata through the YAML frontmatter . as_creation : meta tag name to use as creation date. Default to False. as_update : meta tag name to use as update date. Default to False. datetime_format : datetime format. Default to \"%Y-%m-%d %H:%M\". Example # For example, in your best_article.md created in 2019, you can write the front-matter like this: --- title: \"This page title is a perfect clickbait!\" authors: - \"Julien M.\" date: \"2020-10-22 17:18\" --- # This plugin will change your MkDocs life Lorem ipsum [...] So in your mkdocs.yml you will have: plugins : - rss : date_from_meta : as_creation : \"date\" as_update : false datetime_format : \"%Y-%m-%d %H:%M\" At the end, into the RSS you will get: <item> <title> This page title is a perfect clickbait! </title> <link> https://website.com/articles/best_article/ </link> <pubDate> Thu, 22 Oct 2020 17:18:00 -0000 </pubDate> [...] </item> Prettified output # By default, the output file is minified, using Jinja2 strip options and manual work. It's possible to disable it and prettify the output using pretty_print: true . plugins : - rss : pretty_print : true Default: False . Filter pages # This adds a match_path option which should be a regex pattern matching the path to your files within the docs_dir . For example if you had a blog under docs/blog where docs_dir is docs you might use: plugins : - rss : match_path : \"blog/.*\" Since match_path gives you all the power of regular expressions you can have more complex patterns to include multiple directories. For example, to include all pages under both release-notes and articles : plugins : - rss : match_path : \"(release-notes|articles)/.*\" Default: .* . URL parameters # This option allows you to add parameters to the URLs of the RSS feed items. It works as a dictionary of keys/values that is passed to Python urllib.parse.urlencode . One possible use case is the addition of Urchin Tracking Module (UTM) parameters : plugins : - rss : url_parameters : utm_source : \"documentation\" utm_medium : \"RSS\" utm_campaign : \"feed-syndication\" Will result in: <?xml version=\"1.0\" encoding=\"UTF-8\" ?> <rss> [...] <item> [...] <link> https://guts.github.io/mkdocs-rss-plugin/?utm_source=documentation &amp; utm_medium=RSS &amp; utm_campaign=feed-syndication </link> [...] </item> [...] </channel> </rss> Default: None . Integration # Reference RSS feeds in HTML meta-tags # To facilitate the discovery of RSS feeds, it's recomended to add relevant meta-tags into the pages <head> , through template customization in main.html : {% extends \"base.html\" %} {% block extrahead %} <!-- RSS Feed --> < link rel = \"alternate\" type = \"application/rss+xml\" title = \"RSS feed of created content\" href = \"{{ config.site_url }}feed_rss_created.xml\" > < link rel = \"alternate\" type = \"application/rss+xml\" title = \"RSS feed of updated content\" href = \"{{ config.site_url }}feed_rss_updated.xml\" > {% endblock %}","title":"Settings"},{"location":"configuration/#configuration","text":"To produce a valid RSS feed, the plugin uses: some global settings from MkDocs configuration some page attributes some specific settings to custom behavior or add some optional elements","title":"Configuration"},{"location":"configuration/#mkdocs-configuration","text":"Setting Expected level Corresponding RSS element site_description required description site_name required title and also as source URL label for each feed item site_url required link ---- ---- ---- repo_url recomended docs site_author recomended managingEditor ---- ---- ---- copyright optional copyright locale or theme/locale or theme/language optional language","title":"MkDocs configuration"},{"location":"configuration/#automatic-elements","text":"Variable / value Corresponding RSS element MkDocs build timestamp optional channel elements lastBuildDate and pubDate MkDocs RSS plugin - v 1.0.0 optional channel elements generator","title":"Automatic elements"},{"location":"configuration/#page-attributes","text":"Basically, each page is an item element in the RSS feed. Attribute Expected level Corresponding RSS element page.canonical_url required and optional mandatory item element link and also used as guid page.meta.title required title page.meta.description if present, else extract headlines from the content. See below the item_description_length option . required description creation or last update datetime according git log. Can be overridden by dates in page.meta. If not, then it uses MkDcos build date recomended pubDate page.meta.image optional item element enclosure . Some HTTP requests can be performed to retrieve remote images length. page.meta.authors or page.meta.author . Accepted value types: str list , tuple . To comply with the standard, the page writer is responsible to fill this field following this syntax: john@doe.com (John Doe) ( read this SO ). optional author page.meta.tags or any tags value (for example page.meta.categories ...). Accepted value types: str list . optional category","title":"Page attributes"},{"location":"configuration/#item-image-enclosure","text":"To add an image to a feed item as enclosure , the page writer is responsible to fill the page.meta.image . The plugin tries to retrieve the image length and mime-type to complete the enclosure tag. Accepted keys: image : preferred illustration : alternative to make it easier to comply with some themes Accepted values: remote image URL: must be reachable from the build environment. relative path to the image: the plugin adds the site_url to the path to ensure that image will be reachable by external feed readers once the site is published.","title":"Item image (enclosure)"},{"location":"configuration/#examples","text":"","title":"Examples"},{"location":"configuration/#local-image","text":"mkdocs.yml : site_url : https://blog.mydomain.com Page: --- [...] image: \"featured_images.png\" --- # Page h1 title Some page text. Output: <item> [...] <title> Page h1 title </title> <enclosure url= \"https://blog.mydomain.com/featured_images.png\" type= \"image/png\" length= \"219753\" /> [...] </item>","title":"Local image"},{"location":"configuration/#remote-image","text":"--- [...] image: \"http://example.com/image.jpg\" --- # Page h1 title Some page text. Output: <item> [...] <title> Page h1 title </title> <enclosure url= \"http://example.com/image.jpg\" type= \"image/jpg\" length= \"19753\" /> [...] </item>","title":"Remote image"},{"location":"configuration/#plugin-options","text":"For a sample see homepage .","title":"Plugin options"},{"location":"configuration/#disabling-the-plugin","text":"You can use the enabled option to optionally disable this plugin. A possible use case is local development where you might want faster build times. It's recommended to use this option with an environment variable together with a default fallback (introduced in mkdocs v1.2.1, see docs ). Example: plugins : - rss : enabled : !ENV [ MKDOCS_ENABLE_RSS_PLUGIN , True ] Which enables you to disable the plugin locally using: export MKDOCS_ENABLE_RSS_PLUGIN = false mkdocs serve","title":"Disabling the plugin"},{"location":"configuration/#channel-image","text":"image : URL to image to use as feed illustration. Default: None .","title":"Channel image"},{"location":"configuration/#example","text":"plugins : - rss : image : https://upload.wikimedia.org/wikipedia/commons/thumb/4/43/Feed-icon.svg/128px-Feed-icon.svg.png Output: <image> <url> https://upload.wikimedia.org/wikipedia/commons/thumb/4/43/Feed-icon.svg/128px-Feed-icon.svg.png </url> <title> MkDocs RSS Plugin </title> <link> https://guts.github.io/mkdocs-rss-plugin/ </link> </image>","title":"Example"},{"location":"configuration/#item-comments-path","text":"comments_path : path to add to each item URL pointing. Default: None . For example, if you're using Material for Mkdocs with comment integration (Disqus or Isso), the comment block is under the div id __comments , so you can set: comments_path: \"#__comments\" and the output will be: <item> <title> This page title is a perfect clickbait! </title> <link> https://website.com/articles/best_article/ </link> <comments> https://website.com/articles/best_article/#__comments </comments> [...] </item>","title":"Item comments path"},{"location":"configuration/#feed-length","text":"length : number of pages to include as feed items (entries). Default: 20","title":"Feed length"},{"location":"configuration/#feed-ttl","text":"feed_ttl : number of minutes to be cached. Inserted as channel ttl element. See: W3C RSS 2.0 documentation . Default: 1440 (= 1 day) Output: <ttl> 1440 </ttl>","title":"Feed TTL"},{"location":"configuration/#item-description-length","text":"To fill each item description element : If this value is set to -1 , then the articles' full HTML content will be filled into the description element. Otherwise, the plugin first tries to retrieve the value of the keyword description from the page metadata . If the value is non-negative and no description meta is found, then the plugin retrieves the first number of characters of the page content defined by this setting. Retrieved content is the raw markdown converted rougthly into HTML. abstract_chars_count : number of characters to use as item description. Default: 150","title":"Item description length"},{"location":"configuration/#item-categories","text":"categories : list of page metadata values to use as RSS item categories . Default: None .","title":"Item categories"},{"location":"configuration/#example_1","text":"In configuration: - rss : categories : - tags # will look into page.meta.tags - categories # will also look into page.meta.categories In page 1: --- title: \"Lorem Ipsum 1\" tags: - tag x - tag Y --- [...] In page 2 --- title: \"Page 2\" categories: [\"Release notes\", \"test\"] --- [...] Output: [...] <item> <title> Lorem Ipsum 1 </title> <category> tag x </category> <category> tag Y </category> [...] </item> <item> <title> Page 2 </title> <category> Release notes </category> <category> test </category> [...] </item> [...]","title":"Example"},{"location":"configuration/#dates-overriding","text":"Basically, the plugin aims to retrieve creation and update dates from git log. But sometimes, it does not match the content workflow: markdown generated from sources, . So, it's possible to use the dates manually specified into the page metadata through the YAML frontmatter . as_creation : meta tag name to use as creation date. Default to False. as_update : meta tag name to use as update date. Default to False. datetime_format : datetime format. Default to \"%Y-%m-%d %H:%M\".","title":"Dates overriding"},{"location":"configuration/#example_2","text":"For example, in your best_article.md created in 2019, you can write the front-matter like this: --- title: \"This page title is a perfect clickbait!\" authors: - \"Julien M.\" date: \"2020-10-22 17:18\" --- # This plugin will change your MkDocs life Lorem ipsum [...] So in your mkdocs.yml you will have: plugins : - rss : date_from_meta : as_creation : \"date\" as_update : false datetime_format : \"%Y-%m-%d %H:%M\" At the end, into the RSS you will get: <item> <title> This page title is a perfect clickbait! </title> <link> https://website.com/articles/best_article/ </link> <pubDate> Thu, 22 Oct 2020 17:18:00 -0000 </pubDate> [...] </item>","title":"Example"},{"location":"configuration/#prettified-output","text":"By default, the output file is minified, using Jinja2 strip options and manual work. It's possible to disable it and prettify the output using pretty_print: true . plugins : - rss : pretty_print : true Default: False .","title":"Prettified output"},{"location":"configuration/#filter-pages","text":"This adds a match_path option which should be a regex pattern matching the path to your files within the docs_dir . For example if you had a blog under docs/blog where docs_dir is docs you might use: plugins : - rss : match_path : \"blog/.*\" Since match_path gives you all the power of regular expressions you can have more complex patterns to include multiple directories. For example, to include all pages under both release-notes and articles : plugins : - rss : match_path : \"(release-notes|articles)/.*\" Default: .* .","title":"Filter pages"},{"location":"configuration/#url-parameters","text":"This option allows you to add parameters to the URLs of the RSS feed items. It works as a dictionary of keys/values that is passed to Python urllib.parse.urlencode . One possible use case is the addition of Urchin Tracking Module (UTM) parameters : plugins : - rss : url_parameters : utm_source : \"documentation\" utm_medium : \"RSS\" utm_campaign : \"feed-syndication\" Will result in: <?xml version=\"1.0\" encoding=\"UTF-8\" ?> <rss> [...] <item> [...] <link> https://guts.github.io/mkdocs-rss-plugin/?utm_source=documentation &amp; utm_medium=RSS &amp; utm_campaign=feed-syndication </link> [...] </item> [...] </channel> </rss> Default: None .","title":"URL parameters"},{"location":"configuration/#integration","text":"","title":"Integration"},{"location":"configuration/#reference-rss-feeds-in-html-meta-tags","text":"To facilitate the discovery of RSS feeds, it's recomended to add relevant meta-tags into the pages <head> , through template customization in main.html : {% extends \"base.html\" %} {% block extrahead %} <!-- RSS Feed --> < link rel = \"alternate\" type = \"application/rss+xml\" title = \"RSS feed of created content\" href = \"{{ config.site_url }}feed_rss_created.xml\" > < link rel = \"alternate\" type = \"application/rss+xml\" title = \"RSS feed of updated content\" href = \"{{ config.site_url }}feed_rss_updated.xml\" > {% endblock %}","title":"Reference RSS feeds in HTML meta-tags"}]}